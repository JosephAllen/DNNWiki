using DotNetNuke.Entities.Users;
using DotNetNuke.Wiki.BusinessObjects.Models;
using DotNetNuke.Wiki.Utilities;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;

namespace DotNetNuke.Wiki.BusinessObjects
{
    public class TopicBO : _AbstractBusinessObject<Topic, int>
    {
        #region Variables

        private UnitOfWork _uof;

        #endregion Variables

        #region Ctor

        public TopicBO(UnitOfWork uof)
            : base(uof.Context)
        {
            this._uof = uof;
        }

        #endregion Ctor

        #region Enums

        /// <summary>
        /// The possible controlled errors generated by this class
        /// </summary>
        public enum TopicError
        {
            Error1 = 1,
            Error2 = 2,
            Error3 = 3
        }

        #endregion Enums

        #region Methods

        internal IEnumerable<Topic> GetAllByModuleChangedWhen(int moduleId, int daysBack)
        {
            return this.db.ExecuteQuery<Topic>(CommandType.StoredProcedure, "Wiki_TopicGetAllByModuleChangedWhen", moduleId, daysBack);
        }

        /// <summary>
        /// Gets a topic associated to the module id and have the passed name
        /// </summary>
        /// <param name="moduleId">the module id the topics are associated to</param>
        /// <param name="name">the topic name</param>
        /// <returns>returns a Topic</returns>
        internal Topic GetByNameForModule(int moduleId, string name)
        {
            return this.db.ExecuteQuery<Topic>(CommandType.StoredProcedure, "Wiki_TopicGetByNameForModule", moduleId, name).FirstOrDefault();
        }

        /// <summary>
        /// Gets all topics associated to the module id
        /// </summary>
        /// <param name="moduleId">the module id the topics are associated to</param>
        /// <returns>returns collection of Topics</returns>
        internal IEnumerable<Topic> GetAllByModuleID(int moduleId)
        {
            return this.db.ExecuteQuery<Topic>(CommandType.StoredProcedure, "Wiki_TopicGetAllByModuleID", moduleId);
        }

        internal override void Entity_EvaluateSqlException(
                    SqlException exc,
                    SharedEnum.CrudOperation crudOperation)
        {
            throw new System.NotImplementedException();
        }

        internal IEnumerable<Topic> SearchWiki(string searchString, int moduleId)
        {
            return this.db.ExecuteQuery<Topic>(CommandType.StoredProcedure, "Wiki_TopicSearchWiki", searchString, moduleId);
        }

        internal override void RepositoryDelete(ref Topic entity)
        {
            this.db.Execute(CommandType.StoredProcedure, "Wiki_TopicDelete", entity.TopicID);
        }

        public List<string> GetNotificationEmails(Topic topic)
        {
            Setting wikiSettings = new SettingBO(this._uof).GetByModuleID(topic.ModuleId);

            List<string> lstUsers = new List<string>();

            if (wikiSettings != null)
            {
                //gather the email address from the roles assigned to this module...

                if (!string.IsNullOrWhiteSpace(wikiSettings.CommentNotifyRoles))
                {
                    DotNetNuke.Security.Roles.RoleController objRoles = new DotNetNuke.Security.Roles.RoleController();
                    DotNetNuke.Entities.Modules.ModuleController objModules = new DotNetNuke.Entities.Modules.ModuleController();
                    DotNetNuke.Entities.Modules.ModuleInfo objModule = objModules.GetModule(topic.ModuleId);

                    if (objModule != null)
                    {
                        bool bFetchUsingDNNRoles = false;
                        bool bFetchUsingCustomRoles = false;
                        bool bFetchViewUsers = false;
                        bool bFetchEditUsers = false;

                        bFetchUsingDNNRoles = !string.IsNullOrWhiteSpace(wikiSettings.ContentEditorRoles) && wikiSettings.ContentEditorRoles.StartsWith("UseDNNSettings;");
                        bFetchUsingCustomRoles = !string.IsNullOrWhiteSpace(wikiSettings.CommentNotifyRoles) && !wikiSettings.CommentNotifyRoles.StartsWith("UseDNNSettings;");

                        if (!bFetchUsingCustomRoles)
                        {
                            bFetchEditUsers = wikiSettings.CommentNotifyRoles.Contains(";Edit");
                            bFetchViewUsers = wikiSettings.CommentNotifyRoles.Contains(";View");
                        }

                        //compile our view users, only if enabled
                        if (bFetchViewUsers)
                        {
                            foreach (string role in objModule.AuthorizedViewRoles.Trim(new char[] { ';' }).Split(new char[] { ';' }))
                            {
                                if (role.ToLower().Equals("all users"))
                                {
                                    //trap against fake roles
                                    var arrUsers =
                                        DotNetNuke.Entities.Users.UserController.GetUsers(DotNetNuke.Entities.Portals.PortalController.GetCurrentPortalSettings().PortalId).OfType<UserInfo>();
                                    foreach (DotNetNuke.Entities.Users.UserInfo objUser in arrUsers)
                                    {
                                        if (!lstUsers.Contains(objUser.Email))
                                        {
                                            lstUsers.Add(objUser.Email);
                                        }
                                    }
                                }
                                else
                                {
                                    //this role should be legit
                                    foreach (DotNetNuke.Entities.Users.UserRoleInfo objUserRole in objRoles.GetUserRolesByRoleName(objModule.PortalID, role))
                                    {
                                        if (!lstUsers.Contains(objUserRole.Email))
                                        {
                                            lstUsers.Add(objUserRole.Email);
                                        }
                                    }
                                }
                            }
                        }

                        //compile our edit users, only if enabled
                        if (bFetchEditUsers)
                        {
                            if (bFetchUsingDNNRoles)
                            {
                                //fetch using dnn edit roles
                                foreach (string role in objModule.AuthorizedEditRoles.Trim(new char[] { ';' }).Split(new char[] { ';' }))
                                {
                                    if (role.ToLower().Equals("all users"))
                                    {
                                        //trap against fake roles
                                    }
                                    else
                                    {
                                        //this role should be legit
                                        foreach (DotNetNuke.Entities.Users.UserRoleInfo objUserRole in objRoles.GetUserRolesByRoleName(objModule.PortalID, role))
                                        {
                                            if (!lstUsers.Contains(objUserRole.Email))
                                            {
                                                lstUsers.Add(objUserRole.Email);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                //fetch using custom wiki edit roles
                                foreach (string role in wikiSettings.ContentEditorRoles.Trim(new char[] { ';' }).Split(new char[] { ';' }))
                                {
                                    foreach (DotNetNuke.Entities.Users.UserRoleInfo objUserRole in objRoles.GetUserRolesByRoleName(objModule.PortalID, role))
                                    {
                                        if (!lstUsers.Contains(objUserRole.Email))
                                        {
                                            lstUsers.Add(objUserRole.Email);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                //gather any users emails address from comments in this topic...
                if (wikiSettings.CommentNotifyUsers == true)
                {
                    IEnumerable<CommentEmails> lstEmails = new CommentBO(this._uof).GetCommentNotifyUsers(topic.TopicID);

                    foreach (CommentEmails objCommentEmail in lstEmails)
                    {
                        if (!lstUsers.Contains(objCommentEmail.Email))
                        {
                            lstUsers.Add(objCommentEmail.Email);
                        }
                    }
                }
            }

            return lstUsers;
        }

        #endregion Methods
    }
}