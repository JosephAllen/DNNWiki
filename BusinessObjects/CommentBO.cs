#region Copyright

//
// DotNetNuke� - http://www.dotnetnuke.com Copyright (c) 2002-2013 by DotNetNuke Corporation
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// associated documentation files (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge, publish, distribute,
// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#endregion Copyright

using DotNetNuke.Wiki.BusinessObjects.Models;
using DotNetNuke.Wiki.Utilities;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace DotNetNuke.Wiki.BusinessObjects
{
    public class CommentBO : _AbstractBusinessObject<Comment, int>
    {
        #region Variables

        private UnitOfWork _uof;

        #endregion Variables

        #region Ctor

        public CommentBO(UnitOfWork uof)
            : base(uof.Context)
        {
            this._uof = uof;
        }

        #endregion Ctor

        #region Enums

        /// <summary>
        /// The possible controlled errors generated by this class
        /// </summary>
        public enum CommentError
        {
            Error1 = 1,
            Error2 = 2,
            Error3 = 3
        }

        #endregion Enums

        #region Methods

        /// <summary>
        /// Deletes all the comments with the parent id
        /// </summary>
        /// <param name="parentId">the parent id</param>
        internal void DeleteComments(int parentId)
        {
            this.db.Execute(CommandType.Text, "DELETE FROM Wiki_Comment WHERE ParentId=@0", parentId);
        }

        internal override void Entity_EvaluateSqlException(
            SqlException exc,
            SharedEnum.CrudOperation crudOperation)
        {
            throw new System.NotImplementedException();
        }

        /// <summary>
        /// Gets all comments associated to the parent id passed has parameter
        /// </summary>
        /// <param name="parentid">the parent id of the comments</param>
        /// <returns>returns collection of comments</returns>
        internal IEnumerable<Comment> GetCommentsByParent(int parentid)
        {
            return this.db.ExecuteQuery<Comment>(CommandType.Text, "SELECT * FROM Wiki_Comments where ParentId=@0 order by Datetime desc", parentid);
        }

        /// <summary>
        /// Gets the number of comments associated to the parentid passed has parameter
        /// </summary>
        /// <param name="parentid">the parent id of the comments</param>
        /// <returns>returns a integer value representing the count</returns>
        internal int GetCommentCount(int parentId)
        {
            return this.db.ExecuteScalar<int>(CommandType.Text, "SELECT Count(CommentId) FROM Wiki_Comments where ParentId=@0", parentId);
        }

        internal IEnumerable<CommentEmails> GetCommentNotifyUsers(int parentId)
        {
            return this.db.ExecuteQuery<CommentEmails>(CommandType.Text, "select DISTINCT(Email) from Wiki_Comments where ParentId=@0 AND EmailNotify = 1", parentId);
        }

        #endregion Methods
    }

    public class CommentEmails
    {
        public CommentEmails()
        {
        }

        public CommentEmails(string email)
        {
            this.Email = email;
        }

        private string _email;

        public string Email
        {
            get { return _email; }
            set { _email = value; }
        }
    }
}